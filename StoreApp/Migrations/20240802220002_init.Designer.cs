// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace StoreApp.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240802220002_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.Property<int>("CartLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CartLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Book"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Electronic"
                        });
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CityId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Adana",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Adıyaman",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Afyonkarahisar",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Ağrı",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Amasya",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Ankara",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Antalya",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Artvin",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "Aydın",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Balıkesir",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 11,
                            CityName = "Bilecik",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 12,
                            CityName = "Bingöl",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 13,
                            CityName = "Bitlis",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 14,
                            CityName = "Bolu",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 15,
                            CityName = "Burdur",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 16,
                            CityName = "Bursa",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 17,
                            CityName = "Çanakkale",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 18,
                            CityName = "Çankırı",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 19,
                            CityName = "Çorum",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 20,
                            CityName = "Denizli",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 21,
                            CityName = "Diyarbakır",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 22,
                            CityName = "Edirne",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 23,
                            CityName = "Elazığ",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 24,
                            CityName = "Erzincan",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 25,
                            CityName = "Erzurum",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 26,
                            CityName = "Eskişehir",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 27,
                            CityName = "Gaziantep",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 28,
                            CityName = "Giresun",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 29,
                            CityName = "Gümüşhane",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 30,
                            CityName = "Hakkari",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 31,
                            CityName = "Hatay",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 32,
                            CityName = "Isparta",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 33,
                            CityName = "Mersin",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 34,
                            CityName = "İstanbul",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 35,
                            CityName = "İzmir",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 36,
                            CityName = "Kars",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 37,
                            CityName = "Kastamonu",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 38,
                            CityName = "Kayseri",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 39,
                            CityName = "Kırklareli",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 40,
                            CityName = "Kırşehir",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 41,
                            CityName = "Kocaeli",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 42,
                            CityName = "Konya",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 43,
                            CityName = "Kütahya",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 44,
                            CityName = "Malatya",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 45,
                            CityName = "Manisa",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 46,
                            CityName = "Kahramanmaraş",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 47,
                            CityName = "Mardin",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 48,
                            CityName = "Muğla",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 49,
                            CityName = "Muş",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 50,
                            CityName = "Nevşehir",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 51,
                            CityName = "Niğde",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 52,
                            CityName = "Ordu",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 53,
                            CityName = "Rize",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 54,
                            CityName = "Sakarya",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 55,
                            CityName = "Samsun",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 56,
                            CityName = "Siirt",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 57,
                            CityName = "Sinop",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 58,
                            CityName = "Sivas",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 59,
                            CityName = "Tekirdağ",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 60,
                            CityName = "Tokat",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 61,
                            CityName = "Trabzon",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 62,
                            CityName = "Tunceli",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 63,
                            CityName = "Şanlıurfa",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 64,
                            CityName = "Uşak",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 65,
                            CityName = "Van",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 66,
                            CityName = "Yozgat",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 67,
                            CityName = "Zonguldk",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 68,
                            CityName = "Aksaray",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 69,
                            CityName = "Bayburt",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 70,
                            CityName = "Karaman",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 71,
                            CityName = "Kırıkkale",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 72,
                            CityName = "Batman",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 73,
                            CityName = "Şırnak",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 74,
                            CityName = "Bartın",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 75,
                            CityName = "Ardahan",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 76,
                            CityName = "Iğdır",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 77,
                            CityName = "Yalova",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 78,
                            CityName = "Karabük",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 79,
                            CityName = "Kilis",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 80,
                            CityName = "Osmaniye",
                            CountryId = 1
                        },
                        new
                        {
                            CityId = 81,
                            CityName = "Düzce",
                            CountryId = 1
                        });
                });

            modelBuilder.Entity("Entities.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorName = "Red"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorName = "Blue"
                        },
                        new
                        {
                            ColorId = 3,
                            ColorName = "Green"
                        },
                        new
                        {
                            ColorId = 4,
                            ColorName = "Yellow"
                        },
                        new
                        {
                            ColorId = 5,
                            ColorName = "Purple"
                        },
                        new
                        {
                            ColorId = 6,
                            ColorName = "Orange"
                        },
                        new
                        {
                            ColorId = 7,
                            ColorName = "Pink"
                        },
                        new
                        {
                            ColorId = 8,
                            ColorName = "Brown"
                        },
                        new
                        {
                            ColorId = 9,
                            ColorName = "Black"
                        },
                        new
                        {
                            ColorId = 10,
                            ColorName = "White"
                        },
                        new
                        {
                            ColorId = 11,
                            ColorName = "Gray"
                        },
                        new
                        {
                            ColorId = 12,
                            ColorName = "Cyan"
                        },
                        new
                        {
                            ColorId = 13,
                            ColorName = "Magenta"
                        },
                        new
                        {
                            ColorId = 14,
                            ColorName = "Lime"
                        },
                        new
                        {
                            ColorId = 15,
                            ColorName = "Indigo"
                        },
                        new
                        {
                            ColorId = 16,
                            ColorName = "Violet"
                        },
                        new
                        {
                            ColorId = 17,
                            ColorName = "Maroon"
                        },
                        new
                        {
                            ColorId = 18,
                            ColorName = "Olive"
                        },
                        new
                        {
                            ColorId = 19,
                            ColorName = "Navy"
                        },
                        new
                        {
                            ColorId = 20,
                            ColorName = "Teal"
                        });
                });

            modelBuilder.Entity("Entities.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Türkiye"
                        });
                });

            modelBuilder.Entity("Entities.Models.CouponCode", b =>
                {
                    b.Property<int>("CouponCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CouponCodeDiscount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CouponCodeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StripeCouponId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CouponCodeId");

                    b.ToTable("CouponCodes");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("GiftWrap")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Shipped")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.PrdImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PrdImage");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sizes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 15000m,
                            ProductName = "Phone",
                            ShowCase = false,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 25000m,
                            ProductName = "Notebook",
                            ShowCase = false,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 1500m,
                            ProductName = "Keyboard",
                            ShowCase = false,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 5000m,
                            ProductName = "Monitor",
                            ShowCase = false,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 5000m,
                            ProductName = "Mouse",
                            ShowCase = false,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 50m,
                            ProductName = "Savaş Sanatı",
                            ShowCase = true,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 60m,
                            ProductName = "Yüzbaşının Kızı",
                            ShowCase = true,
                            Sizes = "[]",
                            Summary = ""
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            ColorNames = "[]",
                            Gender = "",
                            ImageUrls = "[]",
                            Price = 500m,
                            ProductName = "İtiraflar",
                            ShowCase = true,
                            Sizes = "[]",
                            Summary = ""
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e97ebf79-4728-4864-96bd-e46808ca4023",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "087ae2ad-049e-4698-83f1-d8ce54833f31",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "69cb97cf-9883-4737-99ee-95f338bd97c9",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.HasOne("Entities.Models.Order", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrderId");

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.PrdImage", b =>
                {
                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
